// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  conversations ChatConversation[]
  messages      ChatMessage[]
  blogPosts     BlogPost[]
  blogComments  BlogComment[]
  blogLikes     BlogLike[]
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Product model
model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  imageUrl      String?
  category      String?
  weight        Float?         // Weight in kilograms
  inStock       Boolean        @default(true)
  featured      Boolean        @default(false)
  discount      Float?         // Discount percentage
  tags          String?        // Comma-separated tags
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  images        ProductImage[] // Relation to product images
}

// ProductImage model for multiple images per product
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  position  Int      @default(0) // For ordering images
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Wishlist model
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Prevent duplicate wishlist items for a user
}

// Category model for product categorization
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Order model
model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Float
  paymentId       String?     // Payment reference ID from payment provider
  paymentProvider String?     // Payment provider name (e.g., PAYPAL, STRIPE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

// OrderItem model (many-to-many relationship between Order and Product)
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Review model for product reviews and ratings
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 star rating
  comment   String?  // Optional review text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isApproved Boolean @default(false) // For moderation
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Chat models for user-admin communication
model ChatConversation {
  id        String        @id @default(cuid())
  userId    String
  title     String
  status    ChatStatus    @default(OPEN)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   ChatMessage[]
}

model ChatMessage {
  id              String           @id @default(cuid())
  conversationId  String
  userId          String
  content         String
  isRead          Boolean          @default(false)
  createdAt       DateTime         @default(now())
  conversation    ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ChatStatus {
  OPEN
  CLOSED
}

// Blog models
model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String
  excerpt     String?
  imageUrl    String?
  published   Boolean       @default(false)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])
  comments    BlogComment[]
  likes       BlogLike[]
  categories  String?       // Comma-separated categories
  tags        String?       // Comma-separated tags
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // Prevent duplicate likes
}
